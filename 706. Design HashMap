Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.

class MyHashMap:

    def __init__(self):
        self.size = 100
        self.data = [[] for _ in range(self.size)]
        
    def hash(self, key):
        return key % self.size
        
    def put(self, key: int, value: int) -> None:
        idx = self.hash(key)
        for pair in self.data[idx]:
            if pair[0] == key:
                pair[1] = value
                return
        self.data[idx].append([key, value])
        

    def get(self, key: int) -> int:
        idx = self.hash(key)
        for pair in self.data[idx]:
            if pair[0] == key:
                return pair[1]
        return -1

    def remove(self, key: int) -> None:
        idx = self.hash(key)        
        for pair in self.data[idx]:
            if pair[0] == key:
                self.data[idx].remove(pair)


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)
