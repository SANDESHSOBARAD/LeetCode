On an infinite plane, a robot initially stands at (0, 0) and faces north. Note that:

The north direction is the positive direction of the y-axis.
The south direction is the negative direction of the y-axis.
The east direction is the positive direction of the x-axis.
The west direction is the negative direction of the x-axis.
The robot can receive one of three instructions:

"G": go straight 1 unit.
"L": turn 90 degrees to the left (i.e., anti-clockwise direction).
"R": turn 90 degrees to the right (i.e., clockwise direction).
The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.

class Solution:
    def isRobotBounded(self, instructions: str) -> bool:
        dx = [0, 1, 0, -1]  # x-direction changes for North, East, South, West
        dy = [1, 0, -1, 0]  # y-direction changes for North, East, South, West
        
        # Initial position and direction (0 = North, 1 = East, 2 = South, 3 = West)
        x, y, direction = 0, 0, 0
        
        # Process each instruction
        for instruction in instructions:
            if instruction == 'G':
                # Move in the current direction
                x += dx[direction]
                y += dy[direction]
            elif instruction == 'L':
                # Turn left (counterclockwise), update direction
                direction = (direction - 1) % 4
            elif instruction == 'R':
                # Turn right (clockwise), update direction
                direction = (direction + 1) % 4
        
        # Robot is bounded if:
        # 1. It returns to the origin (x == 0 and y == 0), OR
        # 2. It does not face North (direction != 0), which means it will loop back.
        return (x == 0 and y == 0) or direction != 0
