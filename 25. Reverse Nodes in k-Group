Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        def reverse_group(prev, curr, k):
            
            prev_tail = prev
            for _ in range(k):
                next_node = curr.next
                curr.next = prev
                prev = curr
                curr = next_node
            return prev, prev_tail

        dummy = ListNode(0)
        dummy.next = head
        prev = dummy

        while True:
            count = 0
            node = prev.next
            while node:
                count += 1
                if count == k:
                    next_group = node.next
                    prev.next, prev = reverse_group(prev.next, prev.next, k)
                    prev.next = next_group
                    node = next_group
                    count = 0
                else:
                    node = node.next
            if count < k:
                break

        return dummy.next
