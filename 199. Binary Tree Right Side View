Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        '''if not root:
            return []
        ans = []
        curr = deque([root])
        while curr:
            val = None
            for i in range(len(curr)):
                popped = curr.popleft()
                
                val = popped.val
                if popped.left:
                    curr.append(popped.left)
                if popped.right:
                    curr.append(popped.right)
            ans.append(val)
        return ans'''
        right_view = dict()
        
        q = deque()
        q.append((root, 0))
        
        while q:
            node, row = q.popleft()
            if node:
                q.append((node.left, row+1))
                q.append((node.right, row+1))
                
                right_view[row] = node.val
                
        return [right_view[key] for key in range(len(right_view))]
