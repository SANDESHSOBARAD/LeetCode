Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        length_of_word1 = len(word1)
        length_of_word2 = len(word2)
        
        if not word1: return length_of_word2
        if not word2: return length_of_word1
        
        dp = [[None for _ in range(length_of_word2 + 1)] for _ in range(length_of_word1 + 1)]
        
        for i in range(length_of_word1 + 1): dp[i][0] = i   

        for j in range(length_of_word2 + 1): dp[0][j] = j     

        for i in range(1, length_of_word1 + 1):
            for j in range(1, length_of_word2 + 1):
                if word1[i - 1] == word2[j - 1]:
                    total_cost = 0
                else:
                    total_cost = 1
                dp[i][j] = min(dp[i][j - 1] + 1, dp[i - 1][j] + 1,dp[i - 1][j - 1] + total_cost)

        return dp[length_of_word1][length_of_word2]
