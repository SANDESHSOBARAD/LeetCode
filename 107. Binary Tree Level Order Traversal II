Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


class Solution:
    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:
        if root is None:
            return []
        
        que = [root]
        result = []
        while que:
            temp = []
            level = []
            for root in que:
                temp.append(root.val)
                if root.left:
                    level.append(root.left)
                if root.right:
                    level.append(root.right)
            result.append(temp)
            que = level
        
        return result[::-1]
    
    
'''  
         if root is None:
            return []
        stack, output = [root], []
        while stack:
            temp = []
            temp_stack = []
            for node in stack:
                temp.append(node.val)
                if node.left:
                    temp_stack.append(node.left)
                if node.right:
                    temp_stack.append(node.right)
            stack = temp_stack
            output.append(temp)
                
        return output'''
