Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).

The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.

class Solution:
    def maxScore(self, s: str) -> int:
        
        maxSum = 0

        for i in range(len(s)-1):
            count0 = 0
            count1 = 0
            leftSub = s[:i+1]
            rightSub = s[i+1:]

            count0 = leftSub.count('0')
            count1 = rightSub.count('1')
            
            currSum = count0 + count1
            maxSum = max(maxSum, currSum)
        
        return maxSum


Better Solution in terms of time complexity:

class Solution:
def maxScore(self, s:str) -> int:
  maxSum = 0
  count0 = 0
  count1 = s.count('1')

  for i in range(len(s)-1):
    if s[i] == '0':
      count0 += 1
    else:
      count1 -= 1

    currSum = count0 + count1
    maxSum = max(maxSum, currSum)
  return maxSum
