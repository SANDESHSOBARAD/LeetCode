The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.


class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        def is_not_under_attack(row, col, queens):
            for r, c in queens:
                if col == c or row + col == r + c or row - col == r - c:
                    return False
            return True
        def backtrack(row, queens, board):
            if row == n:
                solutions.append([''.join(row) for row in board])
                return
            for col in range(n):
                if is_not_under_attack(row, col, queens):
                    queens.append((row, col))
                    board[row][col] = 'Q'
                    backtrack(row + 1, queens, board)
                    board[row][col] = '.'
                    queens.pop()
        solutions = []
        initial_board = [['.'] * n for _ in range(n)]
        backtrack(0, [], initial_board)
        return solutions
