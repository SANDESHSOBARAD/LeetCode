Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        

        def binarySearch(nums, target, isLeft):
            left = 0
            right = len(nums) - 1
            idx = -1

            while left <= right:
                mid = left + (right - left) // 2

                if nums[mid] > target:
                    right = mid - 1
                elif nums[mid] < target:
                    left = mid + 1
                else:
                    idx = mid
                    if isLeft:
                        right = mid - 1
                    else:
                        left = mid + 1
            return idx

        left = binarySearch(nums, target, True)
        right = binarySearch(nums, target, False)

        return [left, right]

        


