You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        
        def revList(head):
            curr = head
            prev = None

            while curr:
                new = curr.next
                curr.next = prev
                prev = curr
                curr = new
            return prev

        dummy = ListNode()
        curr = dummy
        carry = 0

        l1 = revList(l1)
        l2 = revList(l2)

        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0

            total = val1 + val2 + carry
            carry = total // 10
            digit = total % 10

            curr.next = ListNode(digit)
            curr = curr.next

            if l1: l1 = l1.next
            if l2: l2 = l2.next
        
        return revList(dummy.next)
